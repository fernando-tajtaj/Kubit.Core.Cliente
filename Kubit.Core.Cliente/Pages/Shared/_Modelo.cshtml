@using Kubit.Core.Modelo.Templates
@using System.Text.Json
@model KeyValuePair<string, Campo>

@{
    var field = Model;
    var id = field.Key;
    var label = field.Value.Label;
    var required = field.Value.Required ?? false;
    var disabled = field.Value.Disabled ?? false;
    var hidden = field.Value.Hidden ?? false;
    var ctrlEnabled = field.Value.CtrlEnabled ?? string.Empty;
    var valEnabled = field.Value.ValEnabled ?? string.Empty;
    var valDisabled = field.Value.ValDisabled ?? string.Empty;
    var valorCargado = string.Empty;
}

<div class="form-group mb-3 @(hidden ? "d-none" : "")">
    @if (field.Value.Control == "input" && field.Value.Type == "textarea")
    {
        <label for="@id" class="form-label">@label</label>

        <textarea id="@id"
              name="Valores.Campos[@field.Key]"
              class="form-control trumbowyg-editor"
              required="@required">@valorCargado</textarea>

        <script type="text/javascript">
            require(['jquery', 'trumbowyg'], function ($, trumbowyg) {
                $(document).ready(function () {
                    $('#@id').trumbowyg();
                });
            });
        </script>
    }
    else if (field.Value.Control == "input")
    {
        <label for="@id" class="form-label">@label</label>

        var onchangeCalls = new List<string>();
        var oninputCalls = new List<string>();

        if (field.Value.Type == "number")
        {
            var range = field.Value.Range ?? string.Empty;
            if (!string.IsNullOrEmpty(range))
            {
                oninputCalls.Add($"require(['functionMask'], function(mask) {{ mask.validateMaxLength('{range}', '{id}'); }});");
            }
        }

        var precision = field.Value.Precision;
        var scale = field.Value.Scale;

        if (!string.IsNullOrEmpty(ctrlEnabled))
        {
            onchangeCalls.Add($"require(['functionEnabled'], function(enabled) {{ enabled.enabledCtrl('{ctrlEnabled}', '{valEnabled}', '{valDisabled}', '{id}'); }});");
        }

        if (precision != 0)
        {
            oninputCalls.Add($"require(['functionMask'], function(mask) {{ mask.validatePrecisionScale('{precision}', '{scale}', '{id}'); }});");
        }

        var onchangeAttr = onchangeCalls.Count > 0 ? $"onchange=\"{string.Join(";", onchangeCalls)}\"" : "";
        var oninputAttr = oninputCalls.Count > 0 ? $"oninput=\"{string.Join(";", oninputCalls)}\"" : "";

        <input type="@field.Value.Type"
               id="@id"
               name="Valores.Campos[@field.Key]"
               class="form-control"
               value="@valorCargado"
               required="@required"
               disabled="@disabled"
               @Html.Raw(onchangeAttr)
               @Html.Raw(oninputAttr) />
    }
    else if (field.Value.Control == "file")
    {
        <label for="@id" class="form-label">@label</label>

        <input type="file" id="@id" accept="image/*" multiple class="form-control" title="Subir fotos" />

        <div id="div_@id" class="d-flex flex-wrap gap-2"></div>
        <script>
            require(['jquery', 'functionPhoto'], function ($, functionPhoto) {
                functionPhoto.addPhoto('@id');
            });
        </script>
    }
    else if (field.Value.Control == "default")
    {
        <label for="@id" class="form-label">@label</label>

        if (field.Value.DefaultType == 1)
        {
            valorCargado = Context.Session.GetString("EmpresaUuid") ?? string.Empty;
        }
        if (field.Value.DefaultType == 2)
        {
            valorCargado = Context.Session.GetString("UsuarioUuid") ?? string.Empty;
        }

        <input type="text"
               id="@id"
               name="Valores.Campos[@field.Key]"
               class="form-control"
               value="@valorCargado"
               readonly />
    }
    else if (field.Value.Control == "checkbox")
    {
        <label for="@id" class="form-label">@label</label>

        <div class="form-check">
            <input type="checkbox"
                   id="@id"
                   name="Valores.Campos[@field.Key]"
                   class="form-check-input"
                   checked="@(valorCargado == "true" || valorCargado == "on")"
                   required="@required" />
            <label class="form-check-label" for="@id">@label</label>
        </div>
    }
    else if (field.Value.Control == "find")
    {
        <label for="@id" class="form-label">@label</label>

        var paramConsulta = field.Value.ParamConsulta;
        var ctrlParent = field.Value.CtrlParent;
        var fieldsMapping = field.Value.FieldMappings;

        <div class="input-group mb-3" id="div_@id">
            <input type="text" id="val_@id" class="form-control" placeholder="Buscar @label..." readonly />

            <button type="button" class="btn btn-light d-flex align-items-center gap-2"
                    onclick="require(['functionFind'], function(find) { find.openFindModal('@id', '@paramConsulta', '@ctrlParent', false, '@fieldsMapping'); })">
                <span class="material-symbols-outlined fs-5">search</span>
            </button>

            <button type="button" class="btn btn-light d-flex align-items-center gap-2"
                    onclick="require(['functionFind'], function(find) { find.clearFindValue('@id'); })">
                <span class="material-symbols-outlined fs-5">mop</span>
            </button>
        </div>

        <input type="hidden"
               id="@id"
               name="Valores.Campos[@field.Key]"
               value="@valorCargado"
               required="@required" />

        @if (disabled)
        {
            <script>
                require(['functionEnabled'], function(enabled) {
                    enabled.groupDisabled('div_@id', true);
                });
            </script>
        }
    }
    else if (field.Value.Control == "select")
    {
        <label for="@id" class="form-label">@label</label>

        <div class="dropdown w-100">
            <button class="btn btn-light dropdown-toggle w-100 text-start"
                    type="button"
                    id="val_@id"
                    data-bs-toggle="dropdown"
                    aria-expanded="false">
                <span class="dropdown-label" id="label_val_@id">Seleccione una opción</span>
            </button>
            <ul class="dropdown-menu w-100" aria-labelledby="val_@id"></ul>
        </div>
        <input type="hidden"
               id="@id"
               name="Valores.Campos[@field.Key]"
               value="@valorCargado"
               required="@required" />

        var paramConsulta = field.Value.ParamConsulta;

        <script>
            require(['functionDropdown'], function(dropdown) {
                dropdown.openSelectOption('@id', '@paramConsulta');
            });
        </script>
    }
    else if (field.Value.Control == "datetime")
    {
        <label for="@id" class="form-label">@label</label>

        <input type="datetime-local"
               id="@id"
               name="Valores.Campos[@field.Key]"
               class="form-control"
               value="@valorCargado"
               required="@required" />
    }
    else if (field.Value.Control == "time")
    {
        <label for="@id" class="form-label">@label</label>

        <input type="time"
               id="@id"
               name="Valores.Campos[@field.Key]"
               class="form-control"
               value="@valorCargado"
               required="@required" />
    }
    else if (field.Value.Control == "radio")
    {
        <label for="@id" class="form-label">@label</label>

        <div class="form-check">
            <input type="radio"
                   id="@($"{id}_1")"
                   name="Valores.Campos[@field.Key]"
                   value="1"
                   class="form-check-input"
                   checked="@(valorCargado == "1")" />
            <label class="form-check-label" for="@($"{id}_1")">Sí</label>
        </div>
        <div class="form-check">
            <input type="radio"
                   id="@($"{id}_0")"
                   name="Valores.Campos[@field.Key]"
                   value="0"
                   class="form-check-input"
                   checked="@(valorCargado == "0")" />
            <label class="form-check-label" for="@($"{id}_0")">No</label>
        </div>
    }

    @if (required)
    {
        <div class="valid-feedback">¡Se ve bien!</div>
        <div class="invalid-feedback">Por favor complete este campo.</div>
    }
</div>